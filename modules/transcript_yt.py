from googleapiclient.discovery import build
from youtube_transcript_api import YouTubeTranscriptApi
import pandas as pd
import isodate
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv
import concurrent.futures

# Charger les variables d'environnement (cl√© API)
load_dotenv()

# # Gestion de la cl√© API YouTube
# API_KEY = os.getenv("YOUTUBE_API_KEY") # .env
# print(f"Cl√© API charg√©e : {API_KEY}")  # DEBUG : V√©rifier la cl√© API
# # V√©rifier si la cl√© API est bien charg√©e
# if not API_KEY:
#     # raise interrompt tout le programme si il y a une erreur.
#     raise ValueError("Erreur : La cl√© API YouTube n'est pas d√©finie. V√©rifie ton fichier .env.")

# # Cr√©er le service API (√† faire une seule fois)
# youtube = build('youtube', 'v3', developerKey=API_KEY)


# ---------- OPTIMISATION : R√©cup√©ration des transcripts en parall√®le multiprocessing----------

# Fonction pour r√©cup√©rer le transcript d'1 vid√©o
def fetch_transcript(video_id):
    """ R√©cup√®re le transcript d'une vid√©o donn√©e """
    try:
        transcript = YouTubeTranscriptApi.get_transcript(video_id)
        return video_id, " ".join([entry['text'] for entry in transcript])
    except Exception as e:
        return video_id, f"Transcript non disponible : {str(e)[:100]}..."

def recup_transcript(video_ids, max_workers=15):
    """ R√©cup√®re 15 transcripts en parall√®le """
    transcripts = {}

    # Utilisation de ThreadPoolExecutor pour parall√©liser les requ√™tes (VikThor)
    with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
        results = executor.map(fetch_transcript, video_ids)

    # Stockage des r√©sultats dans un dictionnaire
    for video_id, transcript in results:
        transcripts[video_id] = transcript

    return transcripts

# ---------- FIN OPTIMISATION ----------

# Ce bloc de code permet d'√©viter que le script soit ex√©cut√© automatiquement lorsqu'il est 
# import√© dans un autre fichier.
# Il ne s'ex√©cute que si ce fichier est ex√©cut√© directement via `python recup_url_yt.py`.
if __name__ == "__main__":
    print("üîπ Test en mode standalone : ce script est ex√©cut√© directement.")
