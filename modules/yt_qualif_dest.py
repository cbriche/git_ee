import streamlit as st
import pandas as pd
# import des fonctions dans modules
from modules.connect_yt_api import connect_api_youtube
from modules.yt_transcript_video import recup_transcript
from modules.yt_rech_video import recherche_video_yt
from modules.yt_detail_video import recup_detail_video_yt
from modules.yt_filtrer_video import filtrer_video_yt


# Configuration des param√®tres globaux
TOTAL_VIDEOS_NEEDED = 5  # Nombre total de vid√©os finales souhait√©es

# Calcul du nombre de r√©sultats par page en respectant la limite de l'API YouTube (max = 50)
MAX_RESULTS_PER_PAGE = min(TOTAL_VIDEOS_NEEDED * 2, 50)

#lance la connexion √† l'API youtube via la fonction connect_api_youtube
youtube = connect_api_youtube()

  
   
# Fonction pour qualifier une destination via YouTube (ben√©dicte)
def qualif_destination(full_query, search_query):
    """
    Recherche des vid√©os YouTube, applique plusieurs filtres et retourne un DataFrame final.
    Si on n‚Äôa pas 50 vid√©os valides, on relance la recherche jusqu'√† atteindre le quota.
    """
    print("üîµ D√©but de qualif_destination()")
    # Stocke les IDs des vid√©os d√©j√† test√©es
    video_ids = set()
    # DataFrame pour stocker les vid√©os valide
    df_destination  = pd.DataFrame()  
    
    #tant que le nombre de vid√©os est inf√©rieur √† TOTAL_VIDEOS_NEEDED, on continue la recherche
    while len(df_destination) < TOTAL_VIDEOS_NEEDED:
        # On initialise `new_video_ids` √† une liste vide AVANT de l'utiliser
        new_video_ids = []
        # √âtape 1 : dans la liste new_video_ids on r√©cup√®re les vid√©os filtr√©es sur la requete et le title (fx recherche_video_yt)
        new_video_ids = recherche_video_yt(full_query,search_query,youtube,MAX_RESULTS_PER_PAGE,TOTAL_VIDEOS_NEEDED)
        
        #Si l'API retourne None √† cause d'un quota d√©pass√©
        # Ce bloc emp√™che l‚Äôex√©cution si l‚ÄôAPI ne r√©pond plus
        if not new_video_ids:
            st.error("Erreur : L'API YouTube a retourn√© None (quota d√©pass√© ?)")
            st.stop()  # Arr√™te imm√©diatement l'ex√©cution du script Streamlit
            print("‚õîÔ∏è Cette ligne ne devrait pas √™tre atteinte si `st.stop()` fonctionne !")

        # il est possible que nous r√©cup√©rions des vid√©os d√©j√† trait√©es
        # Nous devons les retirer de la liste pour √©viter les doublons
        new_video_ids = [vid for vid in new_video_ids if vid not in video_ids]
    
        # si la liste des vid√©os ID est vide on retourne un DataFrame vide
        # ce bloc emp√™che l‚ÄôAPI de tourner en boucle sur des vid√©os d√©j√† r√©cup√©r√©es
        if not new_video_ids:
            print(f"Plus de vid√©os disponibles apr√®s {len(df_destination)} vid√©os valides")
            return df_destination, list(video_ids)  # üîπ Retourne imm√©diatement un tuple valide
        else:
            # Mettre √† jour la liste des vid√©os d√©j√† trait√©es
            # Convertir en set pour supprimer les doublons et utiliser update()
            video_ids = set(video_ids)  
            # Ajouter les nouveaux IDs
            video_ids.update(new_video_ids)  
            # Reconvertir en liste si n√©cessaire
            video_ids = list(set(video_ids)) 
    
        # √âtape 2 : R√©cup√©ration des d√©tails des vid√©os
        videos = recup_detail_video_yt(video_ids,youtube)
        
        if not videos:
            print("Aucune vid√©o valide apr√®s r√©cup√©ration des d√©tails.")
            return pd.DataFrame(), []
            
        # √âtape 3 : Filtrage des vid√©os (dur√©e, vues, etc.)
        videos_filtrees = filtrer_video_yt(videos)
        
        if not videos_filtrees:
            print("Toutes les vid√©os ont √©t√© rejet√©es apr√®s filtrage.(dur√©e, vues, etc.)")
            return pd.DataFrame(), []
        
        # √âtape 4 : V√©rification de la pr√©sence d'un transcript dans les vid√©os filtr√©es par (dur√©e, vues, etc.)"
        transcripts = recup_transcript([video["Video_ID"] for video in videos_filtrees])
        
        # Filtrer les vid√©os pour ne garder que celles qui ont un transcript valide
        videos_filtrees = [
            video for video in videos_filtrees 
            if video["Video_ID"] in transcripts and "Transcript non disponible" not in transcripts[video["Video_ID"]]
        ]
        
        # Ajout du transcript au DataFrame
        for video in videos_filtrees:
         video["Transcript"] = transcripts.get(video["Video_ID"], "Transcript non disponible")
        
        if not videos_filtrees:
            print("Aucune vid√©o avec transcript disponible.")
            continue
        
        # √âtape 5 : Retourner le DataFrame final
        # Ajouter les nouvelles vid√©os au DataFrame final
        df_new = pd.DataFrame(videos_filtrees)
        df_destination = pd.concat([df_destination, df_new], ignore_index=True)
        
        # üîπ V√©rification finale avant retour
        if df_destination.empty:
            print("Aucun r√©sultat trouv√©, retour d'un DataFrame vide et une liste vide.")
            return pd.DataFrame(), []  # Retourne bien deux valeurs par d√©faut
             
        print("üîç Fin de qualif_destination() - df_destination:", df_destination.shape, "- video_ids:", len(video_ids))
        
        if not isinstance(df_destination, pd.DataFrame) or not isinstance(video_ids, list):
            print("‚ùå Erreur : qualif_destination() retourne un mauvais format :", type(df_destination), type(video_ids))
            return pd.DataFrame(), []
        
        return df_destination, video_ids
    
# Ce bloc de code permet d'√©viter que le script soit ex√©cut√© automatiquement lorsqu'il est 
# import√© dans un autre fichier.
# Il ne s'ex√©cute que si ce fichier est ex√©cut√© directement via `python liste_video_yt.py`.
if __name__ == "__main__":
    print("üîπ Test en mode standalone : ce script est ex√©cut√© directement.")